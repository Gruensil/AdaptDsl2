/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.adaptdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AdaptDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.Model");
		private final Assignment cAdaptationRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAdaptationRulesAdaptionRuleParserRuleCall_0 = (RuleCall)cAdaptationRulesAssignment.eContents().get(0);
		
		//Model:
		//	adaptationRules+=adaptionRule+;
		@Override public ParserRule getRule() { return rule; }
		
		//adaptationRules+=adaptionRule+
		public Assignment getAdaptationRulesAssignment() { return cAdaptationRulesAssignment; }
		
		//adaptionRule
		public RuleCall getAdaptationRulesAdaptionRuleParserRuleCall_0() { return cAdaptationRulesAdaptionRuleParserRuleCall_0; }
	}
	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Greeting:
		//	'Hello' name=ID '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'Hello' name=ID '!'
		public Group getGroup() { return cGroup; }
		
		//'Hello'
		public Keyword getHelloKeyword_0() { return cHelloKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}
	public class AdaptionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.adaptionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRuleNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cConditionsParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cTHENKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cActionsParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//adaptionRule:
		//	'rule' RuleName '{'
		//	'IF' '(' Conditions ')'
		//	'THEN' '('
		//	Actions
		//	')' ';' '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' RuleName '{' 'IF' '(' Conditions ')' 'THEN' '(' Actions ')' ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//RuleName
		public RuleCall getRuleNameParserRuleCall_1() { return cRuleNameParserRuleCall_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'IF'
		public Keyword getIFKeyword_3() { return cIFKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//Conditions
		public RuleCall getConditionsParserRuleCall_5() { return cConditionsParserRuleCall_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'THEN'
		public Keyword getTHENKeyword_7() { return cTHENKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//Actions
		public RuleCall getActionsParserRuleCall_9() { return cActionsParserRuleCall_9; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class RuleNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.RuleName");
		private final Assignment cRuleAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRuleIDTerminalRuleCall_0 = (RuleCall)cRuleAssignment.eContents().get(0);
		
		//RuleName:
		//	rule=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//rule=ID
		public Assignment getRuleAssignment() { return cRuleAssignment; }
		
		//ID
		public RuleCall getRuleIDTerminalRuleCall_0() { return cRuleIDTerminalRuleCall_0; }
	}
	public class ConditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.Conditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cAndOrParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Conditions:
		//	Condition (AndOr Condition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Condition (AndOr Condition)*
		public Group getGroup() { return cGroup; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_0() { return cConditionParserRuleCall_0; }
		
		//(AndOr Condition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//AndOr
		public RuleCall getAndOrParserRuleCall_1_0() { return cAndOrParserRuleCall_1_0; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_1_1() { return cConditionParserRuleCall_1_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFactParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cOperatorParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cFactParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Condition:
		//	Fact Operator Value | Fact '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//Fact Operator Value | Fact '(' ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Fact Operator Value
		public Group getGroup_0() { return cGroup_0; }
		
		//Fact
		public RuleCall getFactParserRuleCall_0_0() { return cFactParserRuleCall_0_0; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_0_1() { return cOperatorParserRuleCall_0_1; }
		
		//Value
		public RuleCall getValueParserRuleCall_0_2() { return cValueParserRuleCall_0_2; }
		
		//Fact '(' ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//Fact
		public RuleCall getFactParserRuleCall_1_0() { return cFactParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class AndOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.AndOr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cANDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cORKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//AndOr:
		//	'AND' | '&' | 'OR' | '|';
		@Override public ParserRule getRule() { return rule; }
		
		//'AND' | '&' | 'OR' | '|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'AND'
		public Keyword getANDKeyword_0() { return cANDKeyword_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }
		
		//'OR'
		public Keyword getORKeyword_2() { return cORKeyword_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
	}
	public class FactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.Fact");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Fact:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Operator:
		//	'>' | '<' | '==' | '!=' | '>=' | '<=';
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '<' | '==' | '!=' | '>=' | '<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_3() { return cExclamationMarkEqualsSignKeyword_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_5() { return cLessThanSignEqualsSignKeyword_5; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	INT | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.Actions");
		private final RuleCall cActionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Actions:
		//	Action*;
		@Override public ParserRule getRule() { return rule; }
		
		//Action*
		public RuleCall getActionParserRuleCall() { return cActionParserRuleCall; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTaskChangeOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNavigationChangeOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLayoutChangeOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Action:
		//	TaskChangeOperation | NavigationChangeOperation | LayoutChangeOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//TaskChangeOperation | NavigationChangeOperation | LayoutChangeOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TaskChangeOperation
		public RuleCall getTaskChangeOperationParserRuleCall_0() { return cTaskChangeOperationParserRuleCall_0; }
		
		//NavigationChangeOperation
		public RuleCall getNavigationChangeOperationParserRuleCall_1() { return cNavigationChangeOperationParserRuleCall_1; }
		
		//LayoutChangeOperation
		public RuleCall getLayoutChangeOperationParserRuleCall_2() { return cLayoutChangeOperationParserRuleCall_2; }
	}
	public class TaskChangeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.TaskChangeOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddViewComponentOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeleteViewComponentOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TaskChangeOperation:
		//	AddViewComponentOperation | DeleteViewComponentOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//AddViewComponentOperation | DeleteViewComponentOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddViewComponentOperation
		public RuleCall getAddViewComponentOperationParserRuleCall_0() { return cAddViewComponentOperationParserRuleCall_0; }
		
		//DeleteViewComponentOperation
		public RuleCall getDeleteViewComponentOperationParserRuleCall_1() { return cDeleteViewComponentOperationParserRuleCall_1; }
	}
	public class AddViewComponentOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.AddViewComponentOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddViewComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cViewComponentParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTargetContainerParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AddViewComponentOperation:
		//	'addViewComponent' '(' ViewComponent ',' TargetContainer ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'addViewComponent' '(' ViewComponent ',' TargetContainer ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'addViewComponent'
		public Keyword getAddViewComponentKeyword_0() { return cAddViewComponentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ViewComponent
		public RuleCall getViewComponentParserRuleCall_2() { return cViewComponentParserRuleCall_2; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//TargetContainer
		public RuleCall getTargetContainerParserRuleCall_4() { return cTargetContainerParserRuleCall_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class DeleteViewComponentOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.DeleteViewComponentOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteViewComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cViewComponentParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeleteViewComponentOperation:
		//	'deleteViewComponent' '(' ViewComponent ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'deleteViewComponent' '(' ViewComponent ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'deleteViewComponent'
		public Keyword getDeleteViewComponentKeyword_0() { return cDeleteViewComponentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ViewComponent
		public RuleCall getViewComponentParserRuleCall_2() { return cViewComponentParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ViewComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.ViewComponent");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ViewComponent:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class TargetContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.TargetContainer");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TargetContainer:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class NavigationChangeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.NavigationChangeOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddNavLinkOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeleteNavLinkOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRedirectNavLinkOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NavigationChangeOperation:
		//	AddNavLinkOperation | DeleteNavLinkOperation | RedirectNavLinkOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//AddNavLinkOperation | DeleteNavLinkOperation | RedirectNavLinkOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddNavLinkOperation
		public RuleCall getAddNavLinkOperationParserRuleCall_0() { return cAddNavLinkOperationParserRuleCall_0; }
		
		//DeleteNavLinkOperation
		public RuleCall getDeleteNavLinkOperationParserRuleCall_1() { return cDeleteNavLinkOperationParserRuleCall_1; }
		
		//RedirectNavLinkOperation
		public RuleCall getRedirectNavLinkOperationParserRuleCall_2() { return cRedirectNavLinkOperationParserRuleCall_2; }
	}
	public class AddNavLinkOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.AddNavLinkOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddNavLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cViewComponentParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTextParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AddNavLinkOperation:
		//	'addNavLink' '(' ViewComponent ',' Text ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'addNavLink' '(' ViewComponent ',' Text ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'addNavLink'
		public Keyword getAddNavLinkKeyword_0() { return cAddNavLinkKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ViewComponent
		public RuleCall getViewComponentParserRuleCall_2() { return cViewComponentParserRuleCall_2; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//Text
		public RuleCall getTextParserRuleCall_4() { return cTextParserRuleCall_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class DeleteNavLinkOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.DeleteNavLinkOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteNavLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cViewComponentParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeleteNavLinkOperation:
		//	'deleteNavLink' '(' ViewComponent ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'deleteNavLink' '(' ViewComponent ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'deleteNavLink'
		public Keyword getDeleteNavLinkKeyword_0() { return cDeleteNavLinkKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ViewComponent
		public RuleCall getViewComponentParserRuleCall_2() { return cViewComponentParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RedirectNavLinkOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.RedirectNavLinkOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRedirectNavLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cViewComponentParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RedirectNavLinkOperation:
		//	'redirectNavLink' '(' ViewComponent ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'redirectNavLink' '(' ViewComponent ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'redirectNavLink'
		public Keyword getRedirectNavLinkKeyword_0() { return cRedirectNavLinkKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ViewComponent
		public RuleCall getViewComponentParserRuleCall_2() { return cViewComponentParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.Text");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Text:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class LayoutChangeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.LayoutChangeOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChangeFontOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChangeFontSizeOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChangeTableCssClassOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LayoutChangeOperation:
		//	ChangeFontOperation | ChangeFontSizeOperation | ChangeTableCssClassOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//ChangeFontOperation | ChangeFontSizeOperation | ChangeTableCssClassOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ChangeFontOperation
		public RuleCall getChangeFontOperationParserRuleCall_0() { return cChangeFontOperationParserRuleCall_0; }
		
		//ChangeFontSizeOperation
		public RuleCall getChangeFontSizeOperationParserRuleCall_1() { return cChangeFontSizeOperationParserRuleCall_1; }
		
		//ChangeTableCssClassOperation
		public RuleCall getChangeTableCssClassOperationParserRuleCall_2() { return cChangeTableCssClassOperationParserRuleCall_2; }
	}
	public class ChangeFontSizeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.ChangeFontSizeOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeFontSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cFontSizeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChangeFontSizeOperation:
		//	'changeFontSize' '(' FontSize ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'changeFontSize' '(' FontSize ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'changeFontSize'
		public Keyword getChangeFontSizeKeyword_0() { return cChangeFontSizeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//FontSize
		public RuleCall getFontSizeParserRuleCall_2() { return cFontSizeParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ChangeColorSchemeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.ChangeColorSchemeOperation");
		private final Keyword cTodoKeyword = (Keyword)rule.eContents().get(1);
		
		//ChangeColorSchemeOperation: // define color schemes and attributes for color schemes
		//	'todo';
		@Override public ParserRule getRule() { return rule; }
		
		//// define color schemes and attributes for color schemes
		//'todo'
		public Keyword getTodoKeyword() { return cTodoKeyword; }
	}
	public class ChangeFontOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.ChangeFontOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeFontKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTextParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChangeFontOperation:
		//	'changeFont' '(' Text ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'changeFont' '(' Text ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'changeFont'
		public Keyword getChangeFontKeyword_0() { return cChangeFontKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Text
		public RuleCall getTextParserRuleCall_2() { return cTextParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ChangeTableCssClassOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.ChangeTableCssClassOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeTableCssKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTextParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ChangeTableCssClassOperation:
		//	'changeTableCss' '(' Text ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'changeTableCss' '(' Text ')'
		public Group getGroup() { return cGroup; }
		
		//'changeTableCss'
		public Keyword getChangeTableCssKeyword_0() { return cChangeTableCssKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Text
		public RuleCall getTextParserRuleCall_2() { return cTextParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FontSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.adaptdsl.AdaptDsl.FontSize");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FontSize:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	private final AdaptionRuleElements pAdaptionRule;
	private final RuleNameElements pRuleName;
	private final ConditionsElements pConditions;
	private final ConditionElements pCondition;
	private final AndOrElements pAndOr;
	private final FactElements pFact;
	private final OperatorElements pOperator;
	private final ValueElements pValue;
	private final ActionsElements pActions;
	private final ActionElements pAction;
	private final TaskChangeOperationElements pTaskChangeOperation;
	private final AddViewComponentOperationElements pAddViewComponentOperation;
	private final DeleteViewComponentOperationElements pDeleteViewComponentOperation;
	private final ViewComponentElements pViewComponent;
	private final TargetContainerElements pTargetContainer;
	private final NavigationChangeOperationElements pNavigationChangeOperation;
	private final AddNavLinkOperationElements pAddNavLinkOperation;
	private final DeleteNavLinkOperationElements pDeleteNavLinkOperation;
	private final RedirectNavLinkOperationElements pRedirectNavLinkOperation;
	private final TextElements pText;
	private final LayoutChangeOperationElements pLayoutChangeOperation;
	private final ChangeFontSizeOperationElements pChangeFontSizeOperation;
	private final ChangeColorSchemeOperationElements pChangeColorSchemeOperation;
	private final ChangeFontOperationElements pChangeFontOperation;
	private final ChangeTableCssClassOperationElements pChangeTableCssClassOperation;
	private final FontSizeElements pFontSize;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdaptDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
		this.pAdaptionRule = new AdaptionRuleElements();
		this.pRuleName = new RuleNameElements();
		this.pConditions = new ConditionsElements();
		this.pCondition = new ConditionElements();
		this.pAndOr = new AndOrElements();
		this.pFact = new FactElements();
		this.pOperator = new OperatorElements();
		this.pValue = new ValueElements();
		this.pActions = new ActionsElements();
		this.pAction = new ActionElements();
		this.pTaskChangeOperation = new TaskChangeOperationElements();
		this.pAddViewComponentOperation = new AddViewComponentOperationElements();
		this.pDeleteViewComponentOperation = new DeleteViewComponentOperationElements();
		this.pViewComponent = new ViewComponentElements();
		this.pTargetContainer = new TargetContainerElements();
		this.pNavigationChangeOperation = new NavigationChangeOperationElements();
		this.pAddNavLinkOperation = new AddNavLinkOperationElements();
		this.pDeleteNavLinkOperation = new DeleteNavLinkOperationElements();
		this.pRedirectNavLinkOperation = new RedirectNavLinkOperationElements();
		this.pText = new TextElements();
		this.pLayoutChangeOperation = new LayoutChangeOperationElements();
		this.pChangeFontSizeOperation = new ChangeFontSizeOperationElements();
		this.pChangeColorSchemeOperation = new ChangeColorSchemeOperationElements();
		this.pChangeFontOperation = new ChangeFontOperationElements();
		this.pChangeTableCssClassOperation = new ChangeTableCssClassOperationElements();
		this.pFontSize = new FontSizeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.adaptdsl.AdaptDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	adaptationRules+=adaptionRule+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Greeting:
	//	'Hello' name=ID '!';
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}
	
	//adaptionRule:
	//	'rule' RuleName '{'
	//	'IF' '(' Conditions ')'
	//	'THEN' '('
	//	Actions
	//	')' ';' '}';
	public AdaptionRuleElements getAdaptionRuleAccess() {
		return pAdaptionRule;
	}
	
	public ParserRule getAdaptionRuleRule() {
		return getAdaptionRuleAccess().getRule();
	}
	
	//RuleName:
	//	rule=ID;
	public RuleNameElements getRuleNameAccess() {
		return pRuleName;
	}
	
	public ParserRule getRuleNameRule() {
		return getRuleNameAccess().getRule();
	}
	
	//Conditions:
	//	Condition (AndOr Condition)*;
	public ConditionsElements getConditionsAccess() {
		return pConditions;
	}
	
	public ParserRule getConditionsRule() {
		return getConditionsAccess().getRule();
	}
	
	//Condition:
	//	Fact Operator Value | Fact '(' ')';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//AndOr:
	//	'AND' | '&' | 'OR' | '|';
	public AndOrElements getAndOrAccess() {
		return pAndOr;
	}
	
	public ParserRule getAndOrRule() {
		return getAndOrAccess().getRule();
	}
	
	//Fact:
	//	ID;
	public FactElements getFactAccess() {
		return pFact;
	}
	
	public ParserRule getFactRule() {
		return getFactAccess().getRule();
	}
	
	//Operator:
	//	'>' | '<' | '==' | '!=' | '>=' | '<=';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Value:
	//	INT | STRING;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Actions:
	//	Action*;
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//Action:
	//	TaskChangeOperation | NavigationChangeOperation | LayoutChangeOperation;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//TaskChangeOperation:
	//	AddViewComponentOperation | DeleteViewComponentOperation;
	public TaskChangeOperationElements getTaskChangeOperationAccess() {
		return pTaskChangeOperation;
	}
	
	public ParserRule getTaskChangeOperationRule() {
		return getTaskChangeOperationAccess().getRule();
	}
	
	//AddViewComponentOperation:
	//	'addViewComponent' '(' ViewComponent ',' TargetContainer ')' ';';
	public AddViewComponentOperationElements getAddViewComponentOperationAccess() {
		return pAddViewComponentOperation;
	}
	
	public ParserRule getAddViewComponentOperationRule() {
		return getAddViewComponentOperationAccess().getRule();
	}
	
	//DeleteViewComponentOperation:
	//	'deleteViewComponent' '(' ViewComponent ')' ';';
	public DeleteViewComponentOperationElements getDeleteViewComponentOperationAccess() {
		return pDeleteViewComponentOperation;
	}
	
	public ParserRule getDeleteViewComponentOperationRule() {
		return getDeleteViewComponentOperationAccess().getRule();
	}
	
	//ViewComponent:
	//	ID;
	public ViewComponentElements getViewComponentAccess() {
		return pViewComponent;
	}
	
	public ParserRule getViewComponentRule() {
		return getViewComponentAccess().getRule();
	}
	
	//TargetContainer:
	//	ID;
	public TargetContainerElements getTargetContainerAccess() {
		return pTargetContainer;
	}
	
	public ParserRule getTargetContainerRule() {
		return getTargetContainerAccess().getRule();
	}
	
	//NavigationChangeOperation:
	//	AddNavLinkOperation | DeleteNavLinkOperation | RedirectNavLinkOperation;
	public NavigationChangeOperationElements getNavigationChangeOperationAccess() {
		return pNavigationChangeOperation;
	}
	
	public ParserRule getNavigationChangeOperationRule() {
		return getNavigationChangeOperationAccess().getRule();
	}
	
	//AddNavLinkOperation:
	//	'addNavLink' '(' ViewComponent ',' Text ')' ';';
	public AddNavLinkOperationElements getAddNavLinkOperationAccess() {
		return pAddNavLinkOperation;
	}
	
	public ParserRule getAddNavLinkOperationRule() {
		return getAddNavLinkOperationAccess().getRule();
	}
	
	//DeleteNavLinkOperation:
	//	'deleteNavLink' '(' ViewComponent ')' ';';
	public DeleteNavLinkOperationElements getDeleteNavLinkOperationAccess() {
		return pDeleteNavLinkOperation;
	}
	
	public ParserRule getDeleteNavLinkOperationRule() {
		return getDeleteNavLinkOperationAccess().getRule();
	}
	
	//RedirectNavLinkOperation:
	//	'redirectNavLink' '(' ViewComponent ')' ';';
	public RedirectNavLinkOperationElements getRedirectNavLinkOperationAccess() {
		return pRedirectNavLinkOperation;
	}
	
	public ParserRule getRedirectNavLinkOperationRule() {
		return getRedirectNavLinkOperationAccess().getRule();
	}
	
	//Text:
	//	STRING;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//LayoutChangeOperation:
	//	ChangeFontOperation | ChangeFontSizeOperation | ChangeTableCssClassOperation;
	public LayoutChangeOperationElements getLayoutChangeOperationAccess() {
		return pLayoutChangeOperation;
	}
	
	public ParserRule getLayoutChangeOperationRule() {
		return getLayoutChangeOperationAccess().getRule();
	}
	
	//ChangeFontSizeOperation:
	//	'changeFontSize' '(' FontSize ')' ';';
	public ChangeFontSizeOperationElements getChangeFontSizeOperationAccess() {
		return pChangeFontSizeOperation;
	}
	
	public ParserRule getChangeFontSizeOperationRule() {
		return getChangeFontSizeOperationAccess().getRule();
	}
	
	//ChangeColorSchemeOperation: // define color schemes and attributes for color schemes
	//	'todo';
	public ChangeColorSchemeOperationElements getChangeColorSchemeOperationAccess() {
		return pChangeColorSchemeOperation;
	}
	
	public ParserRule getChangeColorSchemeOperationRule() {
		return getChangeColorSchemeOperationAccess().getRule();
	}
	
	//ChangeFontOperation:
	//	'changeFont' '(' Text ')' ';';
	public ChangeFontOperationElements getChangeFontOperationAccess() {
		return pChangeFontOperation;
	}
	
	public ParserRule getChangeFontOperationRule() {
		return getChangeFontOperationAccess().getRule();
	}
	
	//ChangeTableCssClassOperation:
	//	'changeTableCss' '(' Text ')';
	public ChangeTableCssClassOperationElements getChangeTableCssClassOperationAccess() {
		return pChangeTableCssClassOperation;
	}
	
	public ParserRule getChangeTableCssClassOperationRule() {
		return getChangeTableCssClassOperationAccess().getRule();
	}
	
	//FontSize:
	//	INT;
	public FontSizeElements getFontSizeAccess() {
		return pFontSize;
	}
	
	public ParserRule getFontSizeRule() {
		return getFontSizeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
