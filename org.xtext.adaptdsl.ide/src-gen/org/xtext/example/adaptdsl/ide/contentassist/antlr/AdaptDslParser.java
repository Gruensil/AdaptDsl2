/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.adaptdsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.adaptdsl.ide.contentassist.antlr.internal.InternalAdaptDslParser;
import org.xtext.example.adaptdsl.services.AdaptDslGrammarAccess;

public class AdaptDslParser extends AbstractContentAssistParser {

	@Inject
	private AdaptDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalAdaptDslParser createParser() {
		InternalAdaptDslParser result = new InternalAdaptDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
					put(grammarAccess.getAndOrAccess().getAlternatives(), "rule__AndOr__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getTaskChangeOperationAccess().getAlternatives(), "rule__TaskChangeOperation__Alternatives");
					put(grammarAccess.getNavigationChangeOperationAccess().getAlternatives(), "rule__NavigationChangeOperation__Alternatives");
					put(grammarAccess.getLayoutChangeOperationAccess().getAlternatives(), "rule__LayoutChangeOperation__Alternatives");
					put(grammarAccess.getGreetingAccess().getGroup(), "rule__Greeting__Group__0");
					put(grammarAccess.getAdaptionRuleAccess().getGroup(), "rule__AdaptionRule__Group__0");
					put(grammarAccess.getConditionsAccess().getGroup(), "rule__Conditions__Group__0");
					put(grammarAccess.getConditionsAccess().getGroup_1(), "rule__Conditions__Group_1__0");
					put(grammarAccess.getConditionAccess().getGroup_0(), "rule__Condition__Group_0__0");
					put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
					put(grammarAccess.getAddViewComponentOperationAccess().getGroup(), "rule__AddViewComponentOperation__Group__0");
					put(grammarAccess.getDeleteViewComponentOperationAccess().getGroup(), "rule__DeleteViewComponentOperation__Group__0");
					put(grammarAccess.getAddNavLinkOperationAccess().getGroup(), "rule__AddNavLinkOperation__Group__0");
					put(grammarAccess.getDeleteNavLinkOperationAccess().getGroup(), "rule__DeleteNavLinkOperation__Group__0");
					put(grammarAccess.getRedirectNavLinkOperationAccess().getGroup(), "rule__RedirectNavLinkOperation__Group__0");
					put(grammarAccess.getChangeFontSizeOperationAccess().getGroup(), "rule__ChangeFontSizeOperation__Group__0");
					put(grammarAccess.getChangeFontOperationAccess().getGroup(), "rule__ChangeFontOperation__Group__0");
					put(grammarAccess.getChangeTableCssClassOperationAccess().getGroup(), "rule__ChangeTableCssClassOperation__Group__0");
					put(grammarAccess.getModelAccess().getAdaptationRulesAssignment(), "rule__Model__AdaptationRulesAssignment");
					put(grammarAccess.getGreetingAccess().getNameAssignment_1(), "rule__Greeting__NameAssignment_1");
					put(grammarAccess.getRuleNameAccess().getRuleAssignment(), "rule__RuleName__RuleAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalAdaptDslParser typedParser = (InternalAdaptDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AdaptDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AdaptDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
